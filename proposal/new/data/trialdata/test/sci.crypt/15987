 from greg onufer eng sun com greg onufer subject re let s build software cryptophones for over the internet organization sun microsystems computer corporation mtn view california lines two two nine distribution usa nntp posting host cheers in graham toal writes in article hal cco caltech edu hal finney writes i tried this code yesterday on my sparcstation elc it takes over three zero zero seconds to compress two two seconds worth of speech this means that it needs to be optimized by over a factor of one zero before it will be usable in even a half duplex mode ouch thanks for trying it the following program is a very quick hack i created a few months ago to determine whether a sun sparcstation ipc could perform real time full duplex encrypted audio with resulting data rates sustainable by today s modems this test program reads linearly encoded audio from the audio device compresses it with gsm zero six one zero compresses frames of one six zero one three bit samples recorded at eight khz into two six zero bits resulting in a five zero hz frame rate encrypts it with des then reverses the process and sends the reconstructed audio back to the audio device the compressed encrypted audio stream is one three kbits s my sparcstation ipc not exactly a very fast machine these days certainly slower than an elc would just barely sustain this activity audio underruns would occcur but the speech was very intelligible i ran it as a real time process to get the best results remember though that this program is a quick hack and the performance can certainly be improved the audio compression routines can be ftp d from tub cs tu berlin de i believe look for gsm or toast i used eric young s des implementation but i no longer know where i got it from cheers greg test program to see how much cpu it takes for secure digital audio written by g onufer greg cheers bungi com written on a sun ipc running solaris two two with a sun isdn s bus card and a speakerbox include include include include include include include include include boolean t svs audio init int fd audio info t prev info audio initinfo info record pause b true info play pause b true info play sample rate eight zero zero zero info play encoding audio encoding linear info play channels one info play precision one six info record sample rate eight zero zero zero info record encoding audio encoding linear info record channels one info record precision one six info record buffer size three two zero four if ioctl fd audio setinfo info record pause b false info play pause b false if ioctl fd audio setinfo boolean t svs in int ifd gsm handle gsm byte buf gsm encode handle sample buf return b true boolean t svs out int ofd gsm handle gsm byte buf if write ofd sample sizeof sample sizeof sample return b true main initialize gsm compression code if handle gsm create null option b true if gsm option handle gsm opt fast if des set key memset ivec out zero sizeof ivec out open audio device and configure it if svs audio init audiofd null exit three for endif take three three byte frame and convert to one six zero samples and play if svs out audiofd handle frame exit two gsm destroy handle